[
["index.html", "R Flight Rules Chapter 1 Flight rules for R", " R Flight Rules Chapter 1 Flight rules for R This has been inspired by k88hudson Where she quotes: Flight rules are a guide for astronauts (now, people using R) about what to do when things go wrong (when you need something done). Flight Rules are the hard-earned body of knowledge recorded in manuals that list, step-by-step, what to do if X occurs, and why. Essentially, they are extremely detailed, scenario-specific standard operating procedures. […] NASA has been capturing our missteps, disasters and solutions since the early 1960s, when Mercury-era ground teams first started gathering “lessons learned” into a compendium that now lists thousands of problematic situations, from engine failure to busted hatch handles to computer glitches, and their solutions. — Chris Hadfield, An Astronaut’s Guide to Life. "],
["data-profiling.html", "Chapter 2 Data Profiling ", " Chapter 2 Data Profiling "],
["quality.html", "2.1 Quality", " 2.1 Quality 2.1.1 Completeness percentage of elements properly populated e.g. testing for NULLs and empty strings where not appropriate # Creating the data frame name &lt;- c(&#39;Bob&#39;, &#39;Sally&#39;, &#39;John&#39;, &#39;Jane&#39;) empty_string &lt;- c(&#39;&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;&#39;) space_string &lt;- c(&#39;hello&#39;, &#39;world&#39;, &#39; &#39;, &#39; &#39;) NA_0 &lt;- c(1, 2, 3, 4) NA_1 &lt;- c(1, NA, 6, 7) NA_2 &lt;- c(1, NA, NA, 9) NA_3 &lt;- c(1, NA, NA, NA) df &lt;- data.frame(name, empty_string, space_string, NA_0, NA_1, NA_2, NA_3, stringsAsFactors = FALSE) df ## name empty_string space_string NA_0 NA_1 NA_2 NA_3 ## 1 Bob hello 1 1 1 1 ## 2 Sally hello world 2 NA NA NA ## 3 John world 3 6 NA NA ## 4 Jane 4 7 9 NA # Count missing data across columns apply(is.na(df), 2, sum) ## name empty_string space_string NA_0 NA_1 ## 0 0 0 0 1 ## NA_2 NA_3 ## 2 3 # count missing data across rows apply(is.na(df), 1, sum) ## [1] 0 3 2 1 # na.omit() returns the object with listwise deletion of missing values. na.omit(df) ## name empty_string space_string NA_0 NA_1 NA_2 NA_3 ## 1 Bob hello 1 1 1 1 # complete.cases() returns a logical vector indicating which cases are complete. df[complete.cases(df), ] ## name empty_string space_string NA_0 NA_1 NA_2 NA_3 ## 1 Bob hello 1 1 1 1 # Inverted -- rows that have missing values df[!complete.cases(df), ] ## name empty_string space_string NA_0 NA_1 NA_2 NA_3 ## 2 Sally hello world 2 NA NA NA ## 3 John world 3 6 NA NA ## 4 Jane 4 7 9 NA # frequency table of columns, counting NA values lapply(X = df, FUN = table, useNA = &#39;always&#39;) ## $name ## ## Bob Jane John Sally &lt;NA&gt; ## 1 1 1 1 0 ## ## $empty_string ## ## hello world &lt;NA&gt; ## 2 1 1 0 ## ## $space_string ## ## hello world &lt;NA&gt; ## 2 1 1 0 ## ## $NA_0 ## ## 1 2 3 4 &lt;NA&gt; ## 1 1 1 1 0 ## ## $NA_1 ## ## 1 6 7 &lt;NA&gt; ## 1 1 1 1 ## ## $NA_2 ## ## 1 9 &lt;NA&gt; ## 1 1 2 ## ## $NA_3 ## ## 1 &lt;NA&gt; ## 1 3 # getting just the unique values from the columns lapply(X = df, FUN = unique) ## $name ## [1] &quot;Bob&quot; &quot;Sally&quot; &quot;John&quot; &quot;Jane&quot; ## ## $empty_string ## [1] &quot;&quot; &quot;hello&quot; &quot;world&quot; ## ## $space_string ## [1] &quot;hello&quot; &quot;world&quot; &quot; &quot; ## ## $NA_0 ## [1] 1 2 3 4 ## ## $NA_1 ## [1] 1 NA 6 7 ## ## $NA_2 ## [1] 1 NA 9 ## ## $NA_3 ## [1] 1 NA # get freq counts into a list where each element in a list is a dataframe lapply(X = df, FUN = function(x){aggregate(data.frame(count = x), list(value = x), length)}) ## $name ## value count ## 1 Bob 1 ## 2 Jane 1 ## 3 John 1 ## 4 Sally 1 ## ## $empty_string ## value count ## 1 2 ## 2 hello 1 ## 3 world 1 ## ## $space_string ## value count ## 1 2 ## 2 hello 1 ## 3 world 1 ## ## $NA_0 ## value count ## 1 1 1 ## 2 2 1 ## 3 3 1 ## 4 4 1 ## ## $NA_1 ## value count ## 1 1 1 ## 2 6 1 ## 3 7 1 ## ## $NA_2 ## value count ## 1 1 1 ## 2 9 1 ## ## $NA_3 ## value count ## 1 1 1 2.1.2 Consistencty # generate sample dataframe fname &lt;- c(&#39;Bob&#39;, &#39;Sally&#39;, &#39;John&#39;, &#39;Jane&#39;) g1 &lt;- c(&#39;M&#39;, &#39;F&#39;, &#39;M&#39;, &#39;F&#39;) g2 &lt;- c(&#39;M&#39;, &#39;F&#39;, &#39;M&#39;, &#39;F&#39;) g3 &lt;- c(&#39;M&#39;, &#39;F&#39;, &#39;M&#39;, &#39;F&#39;) g4 &lt;- c(&#39;F&#39;, &#39;F&#39;, &#39;M&#39;, &#39;M&#39;) df &lt;- data.frame(fname, g1, g2, g3, g4, stringsAsFactors = FALSE) df ## fname g1 g2 g3 g4 ## 1 Bob M M M F ## 2 Sally F F F F ## 3 John M M M M ## 4 Jane F F F M # looks for a pattern that begins with &quot;g&quot; followed by 1 other characters columns &lt;- grep(pattern = &quot;g.?&quot;, x = names(df)) # use the columns that match the pattern to subset the data all_g &lt;- df[, columns] # compares if the first element is the same across the entire row all_same &lt;- apply(X = all_g, MARGIN = 1, function(x){all(x[1] == x)}) # return rows where values are not the same across different &lt;- all_g[!all_same, ] # number of different obervations nrow(different) ## [1] 2 "],
["data-munging.html", "Chapter 3 Data munging ", " Chapter 3 Data munging "],
["subset-of-data-frame.html", "3.1 Subset of data frame", " 3.1 Subset of data frame 3.1.1 Keeping/dropping columns by name Taken from here and here # Creating the data frame fname &lt;- c(&#39;Bob&#39;, &#39;Sally&#39;, &#39;John&#39;, &#39;Jane&#39;) lname &lt;- c(&#39;Dole&#39;, &#39;Doe&#39;, &#39;Doe&#39;, &#39;Smith&#39;) age &lt;- c(32, 24, 28, 25) df &lt;- data.frame(fname, lname, age) df ## fname lname age ## 1 Bob Dole 32 ## 2 Sally Doe 24 ## 3 John Doe 28 ## 4 Jane Smith 25 # keeping columns by name keep &lt;- c(&#39;fname&#39;, &#39;age&#39;) df[, names(df) %in% keep] ## fname age ## 1 Bob 32 ## 2 Sally 24 ## 3 John 28 ## 4 Jane 25 # dropping columns by name drop &lt;- c(&#39;lname&#39;) df[, !(names(df) %in% drop)] ## fname age ## 1 Bob 32 ## 2 Sally 24 ## 3 John 28 ## 4 Jane 25 3.1.2 Work on a subset of data frame using regular expression Sometimes you want to do some kind of calculation or munge on a aubset of a data frame. For example, survey data might be coded q1a - q1k and you want to average the values, sum the values, look at the values, etc… # Create a data frame q13 &lt;- c(1:5) q14a &lt;- c(2:6) q14b &lt;- c(3:7) q14c &lt;- c(4:8) q14z &lt;- c(5:9) df &lt;- data.frame(q13, q14a, q14b, q14c, q14z) df ## q13 q14a q14b q14c q14z ## 1 1 2 3 4 5 ## 2 2 3 4 5 6 ## 3 3 4 5 6 7 ## 4 4 5 6 7 8 ## 5 5 6 7 8 9 # regular expresstion for only sum q14a - q14c, do not include q14z q14pattern &lt;- &#39;^q14[a-cA-C]&#39; # search the column names for a pattern match, return vector of column indices q14columns &lt;- grep(pattern = q14pattern, x = names(df)) # do something with the subset data, here I am summing the rows df$q14.sum &lt;- rowSums(x = df[, q14columns]) df ## q13 q14a q14b q14c q14z q14.sum ## 1 1 2 3 4 5 9 ## 2 2 3 4 5 6 12 ## 3 3 4 5 6 7 15 ## 4 4 5 6 7 8 18 ## 5 5 6 7 8 9 21 We can also do a similar process to only look at the q14 variables q14patternAll &lt;- &#39;^q14&#39; q14columnsAll &lt;- grep(pattern = q14patternAll, x = names(df)) head(df[, q14columnsAll], n = 2) ## q14a q14b q14c q14z q14.sum ## 1 2 3 4 5 9 ## 2 3 4 5 6 12 "],
["arrange-data-frame-columns.html", "3.2 Arrange data frame columns", " 3.2 Arrange data frame columns 3.2.1 Re-odering columns without specfying all of them When working with datasets with many columns, sometimes you just want to have the key row identification variables together and in the beginning. For example if you are dealing with patient data, you may want the id, dob, and gender as the first 3 rows, respectively, and not in arbitrary column positions in the data To arrange columns by specfying all of them and/or just a subset, please see the cookbook link and the dplyr vignette on select() # Create a dataframe example df &lt;- as.data.frame(matrix(c(1:20), ncol=10)) names(df)[c(3, 5, 7)] &lt;- c(&quot;gender&quot;, &quot;id&quot;, &quot;dob&quot;) df ## V1 V2 gender V4 id V6 dob V8 V9 V10 ## 1 1 3 5 7 9 11 13 15 17 19 ## 2 2 4 6 8 10 12 14 16 18 20 # we want to bring &quot;id&quot;, &quot;dob&quot;, and &quot;gender&quot; to the beginning, and keep # everything else the way it is toBeginning &lt;- c(&quot;id&quot;, &quot;dob&quot;, &quot;gender&quot;) df &lt;- cbind(df[, toBeginning], df[, !names(df) %in% toBeginning]) df ## id dob gender V1 V2 V4 V6 V8 V9 V10 ## 1 9 13 5 1 3 7 11 15 17 19 ## 2 10 14 6 2 4 8 12 16 18 20 "],
["apply-function-on-df.html", "3.3 Apply function on df", " 3.3 Apply function on df 3.3.1 Selection df column in apply df &lt;- data.frame(x = 1:5, y = 11:15, z = 101:105) df ## x y z ## 1 1 11 101 ## 2 2 12 102 ## 3 3 13 103 ## 4 4 14 104 ## 5 5 15 105 my_square &lt;- function(row) { x &lt;- row[&#39;x&#39;] return(x ** 2) } apply(X = df, MARGIN = 1, FUN = my_square) ## [1] 1 4 9 16 25 "],
["github-apiv3-rest.html", "Chapter 4 Github APIv3 (REST)", " Chapter 4 Github APIv3 (REST) library(jsonlite) library(httpuv) library(httr) library(gh) token &lt;- Sys.getenv(&quot;GH_CLIENT_SECRET&quot;) if (token == &#39;&#39;) { stop(&#39;You need a github token&#39;, call. = FALSE) } The Github REST API v3 lists everything as curl commands, so when they say something like: curl https://api.github.com/zen ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 31 100 31 0 0 196 0 --:--:-- --:--:-- --:--:-- 196 ## Responsive is better than fast. You can make the equlivalent call from the gh package: gh::gh(&quot;https://api.github.com/zen&quot;) ## { ## &quot;message&quot;: &quot;Anything added dilutes everything else.&quot; ## } You can pass in the raw GET command gh(&quot;https://api.github.com/users/chendaniely&quot;) ## { ## &quot;login&quot;: &quot;chendaniely&quot;, ## &quot;id&quot;: 5782147, ## &quot;node_id&quot;: &quot;MDQ6VXNlcjU3ODIxNDc=&quot;, ## &quot;avatar_url&quot;: &quot;https://avatars3.githubusercontent.com/u/5782147?v=4&quot;, ## &quot;gravatar_id&quot;: &quot;&quot;, ## &quot;url&quot;: &quot;https://api.github.com/users/chendaniely&quot;, ## &quot;html_url&quot;: &quot;https://github.com/chendaniely&quot;, ## &quot;followers_url&quot;: &quot;https://api.github.com/users/chendaniely/followers&quot;, ## &quot;following_url&quot;: &quot;https://api.github.com/users/chendaniely/following{/other_user}&quot;, ## &quot;gists_url&quot;: &quot;https://api.github.com/users/chendaniely/gists{/gist_id}&quot;, ## &quot;starred_url&quot;: &quot;https://api.github.com/users/chendaniely/starred{/owner}{/repo}&quot;, ## &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/chendaniely/subscriptions&quot;, ## &quot;organizations_url&quot;: &quot;https://api.github.com/users/chendaniely/orgs&quot;, ## &quot;repos_url&quot;: &quot;https://api.github.com/users/chendaniely/repos&quot;, ## &quot;events_url&quot;: &quot;https://api.github.com/users/chendaniely/events{/privacy}&quot;, ## &quot;received_events_url&quot;: &quot;https://api.github.com/users/chendaniely/received_events&quot;, ## &quot;type&quot;: &quot;User&quot;, ## &quot;site_admin&quot;: false, ## &quot;name&quot;: &quot;Daniel Chen&quot;, .... Or create “variables” that you can pass in using the : in the GET command, this comes in handy when you start working wiht the various endpoints. gh(&quot;https://api.github.com/users/:user&quot;, user = &#39;chendaniely&#39;) ## { ## &quot;login&quot;: &quot;chendaniely&quot;, ## &quot;id&quot;: 5782147, ## &quot;node_id&quot;: &quot;MDQ6VXNlcjU3ODIxNDc=&quot;, ## &quot;avatar_url&quot;: &quot;https://avatars3.githubusercontent.com/u/5782147?v=4&quot;, ## &quot;gravatar_id&quot;: &quot;&quot;, ## &quot;url&quot;: &quot;https://api.github.com/users/chendaniely&quot;, ## &quot;html_url&quot;: &quot;https://github.com/chendaniely&quot;, ## &quot;followers_url&quot;: &quot;https://api.github.com/users/chendaniely/followers&quot;, ## &quot;following_url&quot;: &quot;https://api.github.com/users/chendaniely/following{/other_user}&quot;, ## &quot;gists_url&quot;: &quot;https://api.github.com/users/chendaniely/gists{/gist_id}&quot;, ## &quot;starred_url&quot;: &quot;https://api.github.com/users/chendaniely/starred{/owner}{/repo}&quot;, ## &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/chendaniely/subscriptions&quot;, ## &quot;organizations_url&quot;: &quot;https://api.github.com/users/chendaniely/orgs&quot;, ## &quot;repos_url&quot;: &quot;https://api.github.com/users/chendaniely/repos&quot;, ## &quot;events_url&quot;: &quot;https://api.github.com/users/chendaniely/events{/privacy}&quot;, ## &quot;received_events_url&quot;: &quot;https://api.github.com/users/chendaniely/received_events&quot;, ## &quot;type&quot;: &quot;User&quot;, ## &quot;site_admin&quot;: false, ## &quot;name&quot;: &quot;Daniel Chen&quot;, .... For example, the endpoint for listing organization repositories GET /orgs/:org/repos Can be passed into the gh function as well gh(&quot;/orgs/:org/repos&quot;, org = &#39;numpy&#39;) ## [ ## { ## &quot;id&quot;: 754238, ## &quot;node_id&quot;: &quot;MDEwOlJlcG9zaXRvcnk3NTQyMzg=&quot;, ## &quot;name&quot;: &quot;datetime&quot;, ## &quot;full_name&quot;: &quot;numpy/datetime&quot;, ## &quot;private&quot;: false, ## &quot;owner&quot;: { ## &quot;login&quot;: &quot;numpy&quot;, ## &quot;id&quot;: 288276, ## &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjI4ODI3Ng==&quot;, ## &quot;avatar_url&quot;: &quot;https://avatars2.githubusercontent.com/u/288276?v=4&quot;, ## &quot;gravatar_id&quot;: &quot;&quot;, ## &quot;url&quot;: &quot;https://api.github.com/users/numpy&quot;, ## &quot;html_url&quot;: &quot;https://github.com/numpy&quot;, ## &quot;followers_url&quot;: &quot;https://api.github.com/users/numpy/followers&quot;, ## &quot;following_url&quot;: &quot;https://api.github.com/users/numpy/following{/other_user}&quot;, ## &quot;gists_url&quot;: &quot;https://api.github.com/users/numpy/gists{/gist_id}&quot;, ## &quot;starred_url&quot;: &quot;https://api.github.com/users/numpy/starred{/owner}{/repo}&quot;, ## &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/numpy/subscriptions&quot;, .... "]
]
